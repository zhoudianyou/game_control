/**
 * 
 */
package com.cslc.eils.gameControl.Factory;

import java.io.IOException;
import java.util.List;

import org.apache.commons.httpclient.HttpException;

import com.cslc.eils.gameControl.cache.SNIncrementManager;
import com.cslc.eils.gameControl.core.InitSystem;
import com.cslc.eils.gameControl.netInterface.httpClient.GetRngs;
import com.cslc.eils.gameControl.pojo.REQBet;
import com.cslc.eils.gameControl.pojo.RngReq;
import com.cslc.eils.gameControl.pojo.TicketDetailInfo;
import com.cslc.eils.gameControl.util.DateUtil;
import com.cslc.eils.gameControl.util.JsonUtil;
import com.cslc.eils.gameControl.util.SystemUtil;



/**
 * @author tianhao
 *
 */
public class SlotFactory  extends AbstractFactory implements ITicketFactory{

	/* (non-Javadoc)
	 * @see com.cslc.eils.gameControl.Factory.AbstractFactory#createTicket(com.cslc.eils.gameControl.pojo.REQBet)
	 */
	@Override
	public IProduct createTicket(REQBet reqBet) throws HttpException, IOException {
		int step = reqBet.getStep();
		switch (step) {
		case 1:
			InstanceTicket ticket = createFristTicket( reqBet);
			return ticket;
		case 2:
			InstanceTicket ticket2 = createSecondTicket( reqBet);
			return ticket2;
			
			
		}
		return null;
	}

	

	/**
	 * @param reqBet
	 * @return
	 * @throws IOException 
	 * @throws HttpException 
	 */
	private InstanceTicket createFristTicket(REQBet reqBet) throws HttpException, IOException {
		InstanceTicket ticket = new InstanceTicket();
		int betValue = reqBet.getBetValue();
		int gameId = reqBet.getGameID();
		ticket.setBetValue(betValue);
		ticket.setGameID(gameId);
		
			
		long SerialNumber = ((SNIncrementManager) InitSystem.getBean("snIncrementManager")).getSerialNumber(gameId);//  get SerialNumber++
		String lotterySn  = SystemUtil.createlotterySn(gameId,betValue, SerialNumber);
		ticket.setLotterySn(lotterySn);
		
		List<Integer> rngs = this.getFristRngs();
		ticket.setRngs(rngs.toString());
		
		OutPut outPut = new OutPut(rngs.get(0),rngs.get(1),rngs.get(2));
		ticket.setOutPut(outPut.fromat());
		
		int prizeLevel = judgePrizeLevel(outPut);
		ticket.setPrizeLevel(prizeLevel);
		//TODO get prize
		int prize = 0;
		switch (prizeLevel) {
		case 0:
			ticket.setEndFlag(true);
			break;
		case 1:
			prize = 25;
			ticket.setEndFlag(false);
			break;
		case 2:
			prize = 2;
			ticket.setEndFlag(false);
			break;
		}
		prize=betValue*prize;
		ticket.setPrize(prize);
		
		
		
		//游戏类型
		int gameType = 3;
		//奖组顺序号(定长)
		String fixedLotteryId = SystemUtil.fixedLengthString(0, 6);	
		//奖等
		String fixedAwardLevel = SystemUtil.fixedLengthString(prizeLevel, 2);
		//奖金= 奖等中奖金*（投注金额/基础面值(2)）
		String fixedPrice = SystemUtil.fixedLengthString(prize, 8);
		//是否大奖
		int isLargeAward = SystemUtil.isLargeAward(prize);
		//扣税金额
		 int tax = SystemUtil.getTax(prize);
		//扣税金额(定长)
		 String fixedTax = SystemUtil.fixedLengthString(tax, 8);
		//时间戳
		String creatTime = DateUtil.getDate();
		TicketDetailInfo td = new TicketDetailInfo();
		td.setLotteryId(0);
		td.setLotterySn(lotterySn);
		td.setTicketContent(outPut.fromat());
		/**********串行化票信息************/
		StringBuffer sb = new StringBuffer();
		
		//票sn
		sb.append(gameId);
		sb.append(lotterySn);
		
		//票基本信息
		sb.append(",");
		sb.append(gameId);
		sb.append(",");
		sb.append(gameType);
		sb.append(",");
		sb.append(betValue);
		sb.append(",");
		sb.append(fixedLotteryId);
		sb.append(",");
		
		//票详细信息
		sb.append(fixedAwardLevel);
		sb.append(",");
		sb.append(fixedPrice);
		sb.append(",");
		sb.append(isLargeAward);
		sb.append(",");
		sb.append(fixedTax);
		sb.append(",");
		sb.append(creatTime);
		sb.append(",");		
		sb.append(JsonUtil.pojoToJson(td));	
		
		//串行化票信息
		ticket.setTicketContent(sb.toString());
		return ticket;
	}

	/**
	 * @param reqBet
	 * @return
	 * @throws IOException 
	 * @throws HttpException 
	 */
	private InstanceTicket createSecondTicket(REQBet reqBet) throws HttpException, IOException {
		InstanceTicket ticket = new InstanceTicket();
		ticket.setLotterySn(reqBet.getInPut());//LotterySn为用户输入
		int betValue = reqBet.getBetValue();//betValue为第一步中奖金额
		int gameId = reqBet.getGameID();
		ticket.setBetValue(betValue);
		ticket.setGameID(gameId);
		
		List<Integer> rng = this.getSecondRng();
		ticket.setRngs(rng.toString());
		
		int prize = 0 ;
		String fixedAwardLevel = null;
		String fixedPrice = null;
		if(rng.get(0) == 0){
			prize = betValue*2;
			ticket.setOutPut("0");
			//奖金翻倍
			ticket.setPrize(prize);
			//奖等
			 fixedAwardLevel = SystemUtil.fixedLengthString(3, 2);
			//奖金= 奖等中奖金*（投注金额/基础面值(2)）
			 fixedPrice = SystemUtil.fixedLengthString(betValue*2, 8);
		}else{
			//失败，奖金和奖等归零
			ticket.setOutPut("1");
			ticket.setPrize(0);
			ticket.setPrizeLevel(0);
			//奖等
			 fixedAwardLevel = SystemUtil.fixedLengthString(0, 2);
			//奖金= 奖等中奖金*（投注金额/基础面值(2)）
			 fixedPrice = SystemUtil.fixedLengthString(0, 8);
		}
		ticket.setStep(2);
		ticket.setEndFlag(true);
		
		
				//游戏类型
				int gameType = 3;


				//奖组顺序号(定长)
				String fixedLotteryId = SystemUtil.fixedLengthString(0, 6);	
				
				//是否大奖
				int isLargeAward = SystemUtil.isLargeAward(prize);
				//扣税金额
				 int tax = SystemUtil.getTax(prize);
				//扣税金额(定长)
				 String fixedTax = SystemUtil.fixedLengthString(tax, 8);
				//时间戳
				String creatTime = DateUtil.getDate();
				TicketDetailInfo td = new TicketDetailInfo();
				td.setLotteryId(0);
				td.setLotterySn(reqBet.getInPut());
				td.setTicketContent(rng.get(0).toString());
				/**********串行化票信息************/
				StringBuffer sb = new StringBuffer();
				
				//票sn
				sb.append(gameId);
				sb.append(reqBet.getInPut());

				
				//票基本信息
				sb.append(",");
				sb.append(gameId);
				sb.append(",");
				sb.append(gameType);
				sb.append(",");
				sb.append(betValue);
				sb.append(",");
				sb.append(fixedLotteryId);
				sb.append(",");
				
				//票详细信息
				sb.append(fixedAwardLevel);
				sb.append(",");
				sb.append(fixedPrice);
				sb.append(",");
				sb.append(isLargeAward);
				sb.append(",");
				sb.append(fixedTax);
				sb.append(",");
				sb.append(creatTime);
				sb.append(",");		
				sb.append(JsonUtil.pojoToJson(td));	
				
				//串行化票信息
				ticket.setTicketContent(sb.toString());
		return ticket;
	}
	
	



	/**
	 * @return
	 * @throws HttpException
	 * @throws IOException
	 */
	private List<Integer> getFristRngs() throws HttpException, IOException {
			GetRngs getRngs = new GetRngs();
			RngReq rngReq = new RngReq();
			rngReq.setMinValue(0);
			rngReq.setMaxValue(11);
			rngReq.setRandomNumberCount(3);
			rngReq.setAllowMultipleRequest(true);
			rngReq.setAllowRepeated(true);
		return getRngs.getRngs(rngReq);
	}
	
	 /**
	 * @return
	 * @throws IOException 
	 * @throws HttpException 
	 */
	private List<Integer> getSecondRng() throws HttpException, IOException {
		GetRngs getRngs = new GetRngs();
		RngReq rngReq = new RngReq();
		rngReq.setMinValue(0);
		rngReq.setMaxValue(1);
		rngReq.setRandomNumberCount(1);
		rngReq.setAllowMultipleRequest(true);
		rngReq.setAllowRepeated(true);
		return getRngs.getRngs(rngReq);
		}

	/**
	 * @param outPut
	 * @return
	 */
	private int judgePrizeLevel(OutPut outPut) {
		if(outPut.frist == outPut.second && outPut.frist == outPut.third){
			return 1;
		}
		if((outPut.frist == outPut.second && outPut.frist != outPut.third)
				||( outPut.frist == outPut.third && outPut.frist != outPut.second)
				||(outPut.second == outPut.third && outPut.second != outPut.frist )){
			return 2;
		}
		return 0;
	}


	class OutPut{
		private int frist;
		private int second;
		private int third;
		
		public OutPut(int frist,int second,int third){
			this.frist = frist;
			this.second = second;
			this.third = third;
		}
		
		public String fromat(){
			StringBuffer sb = new StringBuffer();
			sb.append(frist);
			sb.append(",");
			sb.append(second);
			sb.append(",");
			sb.append(third);
			return sb.toString();
		}

		public int getFrist() {
			return frist;
		}

		public void setFrist(int frist) {
			this.frist = frist;
		}

		public int getSecond() {
			return second;
		}

		public void setSecond(int second) {
			this.second = second;
		}

		public int getThird() {
			return third;
		}

		public void setThird(int third) {
			this.third = third;
		}
		
	}


}
